import krpc
import time

conn = krpc.connect('Episode 2')
vessel = conn.space_center.active_vessel

def launch():
    vessel.control.sas = True
    vessel.control.throttle = 1
    time.sleep(1)
    print('Launch!')
    vessel.control.activate_next_stage()

def gravity_turn():
    turn_angle = 0
    turn_start_altitude = 500
    turn_end_altitude = 35000
    target_altitude = 100000

    altitude = conn.add_stream(getattr, vessel.flight(), 'mean_altitude')
    apoapsis = conn.add_stream(getattr, vessel.orbit, 'apoapsis_altitude')
    vessel.auto_pilot.target_pitch_and_heading(90,90)
    vessel.auto_pilot.engage()
    while True:

        if altitude() > turn_start_altitude and altitude() < turn_end_altitude:
            frac = ((altitude() - turn_start_altitude) /
                    (turn_end_altitude - turn_start_altitude))
            new_turn_angle = frac * 90

            if abs(new_turn_angle - turn_angle) > 0.5:
                turn_angle = new_turn_angle
                vessel.auto_pilot.target_pitch_and_heading(90 - turn_angle, 90)

        if apoapsis() > target_altitude * 0.9:
            print('Approaching target apoapsis')
            break

        time.sleep(0.1)

    vessel.control.throttle = 0.25

    while apoapsis() < target_altitude:
        time.sleep(0.1)
    print('Target Apoapsis Reached')
    vessel.control.throttle = 0.0
    vessel.auto_pilot.disengage()
    vessel.control.sas = True
    time.sleep(0.5)
    vessel.control.sas_mode = vessel.control.sas_mode.prograde
    time.sleep(1)
    conn.space_center.physics_warp_factor = 3
    while altitude() < 70000:
        time.sleep(1)
    conn.space_center.physics_warp_factor = 0


def reentry():
    altitude = conn.add_stream(getattr, vessel.flight(), 'mean_altitude')

    while altitude() > 70000:
        time.sleep(1)

    vessel.control.activate_next_stage()
    vessel.control.sas = True
    time.sleep(0.5)
    vessel.control.sas_mode = vessel.control.sas_mode.retrograde

    while altitude() > 8000:
        time.sleep(1)

    vessel.control.activate_next_stage()



launch()
gravity_turn()
reentry()